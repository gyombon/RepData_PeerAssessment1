sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
rm(list = ls())
library("swirl")
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time
)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version >= "3.0.2", country == "US")
filter(cran, r_version >= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, siz_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
rest <- gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
next()
swirl()
submit()
submit()
reset()
swirl()
submit()
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class, grade) %>%
print
students3
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class, grade) %>%
print
gather(students3, class, grade, class1:class5, na.rm = TRUE)
students3 %>% gather(class, grade, class1:class5, na.rm = TRUE) %>% spread(class, grade) %>% print
submit()
library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
rm(list = ls())
set.seed(22112012)
c(sample(1:50, 5), sample(1:12, 2))
c(sample(1:50, 5), sample(1:12, 2))
c(sample(1:50, 5), sample(1:12, 2))
c(sample(1:50, 5), sample(1:12, 2))
rm(list = ls())
library("swirl")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this)day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 16, minutes = 37)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
swirl()
rm(list = ls())
library("swirl")
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
12
abline(h = 0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
data <- read.csv("activity.csv", sep = ",", header = TRUE)
data$date <- as.Date(data$date, "%Y-%m-%d")
stepsperday <- tapply(data$steps, data$date, sum, na.rm = TRUE)
hist(stepsperday)
library(ggplot2)
qplot(stepsperday, bins = 2500)
qplot(stepsperday, binwidth] = 2500)
qplot(stepsperday, binwidth = 2500)
qplot(stepsperday, binwidth = 1000)
qplot(stepsperday, binwidth = 2500, main = "Frequency of Total Number of Steps Taken per Day",
xlab = "Steps per Day", ylab = "Frequency", plot.title = element_text(hjust=0.5))
qplot(stepsperday, binwidth = 2500, main = "Frequency of Total Number of Steps Taken per Day",
xlab = "Steps per Day", ylab = "Frequency") + theme(plot.title = element_text(hjust=0.5))
mean(stepsperday)
median(stepsperday)
mean(stepsperday, na.rm = TRUE)
head(data)
averagestepsperinterval <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
head(averagestepsperinterval)
qplot(averagestepsperinterval)
plot(averagestepsperinterval, type = "l")
averagestepsperinterval
plot(averagestepsperinterval, names(averagestepsperinterval), type = "l")
plot(names(averagestepsperinterval), averagestepsperinterval, type = "l")
max(averagestepsperinterval)
max <- max(averagestepsperinterval)
names(max)
maxname <- names(max(averagestepsperinterval))
maxname
averagestepsperinterval[max(averagestepsperinterval)]
averagestepsperinterval[averagestepsperinterval = max]
averagestepsperinterval[averagestepsperinterval == max]
count(is.na(data$steps))
sum(is.na(data$steps))
data2 <- data
data2$steps[1]
data2$interval[1]
max
maxname
maxsteps5min <- stepsmeanper5min[stepsmeanper5min == max(stepsmeanper5min)]
stepsmeanper5min <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
maxsteps5min <- stepsmeanper5min[stepsmeanper5min == max(stepsmeanper5min)]
max5min <- names(maxsteps5min)
maxsteps5min[names(maxsteps5min) == "835"]
stepsmeanper5min[names(stepsmeanper5min) == "835"]
stepsmeanper5min[names(stepsmeanper5min) == "1000"]
stepsmeanper5min[names(stepsmeanper5min) == "1005"]
stepsmeanper5min[names(stepsmeanper5min) == "1004"]
for(i in 1:nrow(data2)) {}
for(i in 1:nrow(data2)) {}
for(i in 1:nrow(data2)) {if(is.na(data2$steps[i]){data2$steps[i] <- stepsmeanper5min[names(stepsmeanper5min) == data2$interval[i]]}}
for(i in 1:nrow(data2)) {if(is.na(data2$steps[i])){data2$steps[i] <- stepsmeanper5min[names(stepsmeanper5min) == data2$interval[i]]}}
sum(is.na(data2$steps))
if(is.na(data2$steps)) {print("there is a problem")}
any(is.na(data2$steps))
if(any(is.na(data2$steps))) {"there is a problem"}
if(any(is.na(data2$steps))) {print("there is a problem")}
if(TRUE) {"there is a problem"}
paste{"there are still",12," missing values"}
paste("there are still",12," missing values")
stepsperday2 <- tapply(data2$steps, data2$date, sum)
library(ggplot2)
qplot(stepsperday2, binwidth = 2500, main = "Distribution of Total Number of Steps Taken per Day (missing values replaced)",
xlab = "Total Number of Steps Taken per Day", ylab = "Frequency") + theme(plot.title = element_text(hjust = 0.5))
stepsmean2 <- round(mean(stepsperday2), 2)
stepsmean2
stepsmedian2 <- median(stepsperday2, na.rm = TRUE)
stepsmedian2
stepsperday2
mean(stepsperday)
mean(stepsperday2)
stepsperday
data2 <- data
for(i in 1:nrow(data2)) {
if(is.na(data2$steps[i])) {
data2$steps[i] <- round(stepsmeanper5min[names(stepsmeanper5min) == data2$interval[i]])
}
}
if(any(is.na(data2$steps))) {
paste("There are still", sum(is.na(data2$steps)), "missing values")
}
if(any(is.na(data2$steps))) {
paste("There are still", sum(is.na(data2$steps)), "missing values")
}
stepsperday2 <- tapply(data2$steps, data2$date, sum)
stepsmean2 <- round(mean(stepsperday2), 2)
stepsmean2
stepsmedian2 <- median(stepsperday2, na.rm = TRUE)
stepsmedian2
sum(stepsmeanper5min)
test <- stepsmeanper5min / sum(stepsmeanper5min) * stepsmean
stepsmean <- round(mean(stepsperday), 2)
test <- stepsmeanper5min / sum(stepsmeanper5min) * stepsmean
test
sum(test)
stepsperday2 <- tapply(data2$steps, data2$date, sum)
library(ggplot2)
qplot(stepsperday2, binwidth = 2500, main = "Distribution of Total Number of Steps Taken per Day (missing values replaced)",
xlab = "Total Number of Steps Taken per Day", ylab = "Frequency") + theme(plot.title = element_text(hjust = 0.5))
mean(stepsperday2)
mean(stepsperday)
sum(stepsmeanper5min2)
stepsmeanper5min2 <- stepsmeanper5min / sum(stepsmeanper5min) * stepsmean
sum(stepsmeanper5min2)
rm("data2")
data2 <- data
for(i in 1:nrow(data2)) {
if(is.na(data2$steps[i])) {
data2$steps[i] <- stepsmeanper5min2[names(stepsmeanper5min2) == data2$interval[i]]
}
}
if(any(is.na(data2$steps))) {
paste("There are still", sum(is.na(data2$steps)), "missing values")
}
stepsperday2 <- tapply(data2$steps, data2$date, sum)
stepsmean2 <- mean(stepsperday2)
stepsmean2
data2$steps[1]
data2$steps
data2$steps[1:288]
stepsmeanper5min2
data2$steps[1:288] == stepsmeanper5min2
stepsperday2 <- tapply(data2$steps, data2$date, sum)
stepsperday2
mean(stepsperday2)
data$date
data[, is.na(data$steps)]
is.na(data$steps)
data[is.na(data$steps), ]
unique(data[is.na(data$steps), ]$date)
datewithnodata <- unique(data[is.na(data$steps), ]$date)
stepsperday <- tapply(data$steps, data$date[!datewithnodata], sum, na.rm = TRUE)
stepsperday <- tapply(data$steps, data$date[data$date != datewithnodata], sum, na.rm = TRUE)
data3 <- data[data$date != datewithnodata, ]
unique(data3$date)
data3 <- data[!(data$date %in% datewithnodata), ]
unique(data3$date)
rm(list = ls())
data <- read.csv("activity.csv", sep = ",", header = TRUE)
data$date <- as.Date(data$date, "%Y-%m-%d")
datewithnodata <- unique(data[is.na(data$steps), ]$date)
data2 <- data[!(data$date %in% datewithnodata), ]
rm(datewithnodata)
dateswithnodata <- unique(data[is.na(data$steps), ]$date)
data2 <- data[!(data$date %in% datewithnodata), ]
dateswithnodata <- unique(data[is.na(data$steps), ]$date)
data2 <- data[!(data$date %in% dateswithnodata), ]
stepsperday <- tapply(data2$steps, data2$date, sum)
stepsperday
data3 <- data
for(i in 1:nrow(data3)) {
if(is.na(data3$steps[i])) {
data3$steps[i] <- stepsmeanper5min2[names(stepsmeanper5min2) == data3$interval[i]]
}
}
stepsmeanper5min2 <- stepsmeanper5min / sum(stepsmeanper5min) * stepsmean
stepsmean <- mean(stepsperday)
stepsmedian <- median(stepsperday)
stepsmeanper5min <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
maxsteps5min <- stepsmeanper5min[stepsmeanper5min == max(stepsmeanper5min)]
max5min <- names(maxsteps5min)
missingsteps <- sum(is.na(data$steps))
stepsmeanper5min2 <- stepsmeanper5min / sum(stepsmeanper5min) * stepsmean
data3 <- data
for(i in 1:nrow(data3)) {
if(is.na(data3$steps[i])) {
data3$steps[i] <- stepsmeanper5min2[names(stepsmeanper5min2) == data3$interval[i]]
}
}
stepsperday2 <- tapply(data3$steps, data3$date, sum)
stepsmean2 <- mean(stepsperday2)
stepsmedian2 <- median(stepsperday2, na.rm = TRUE)
lapply(data3$date, weekdays)
lapply(data3$date, function(x) if(weekdays(x) %in% c("Saturday", "Sunday")) {"Weekend"} else {"Week day"})
data3$day <- lapply(data3$date, function(x) if(weekdays(x) %in% c("Saturday", "Sunday")) {"Weekend"} else {"Week day"})
table(data3$day)
sum(data3$day == "Weekend")
sum(data3$day == "Week day")
data3$day <- lapply(data3$date, function(x) ifelse(weekdays(x) %in% c("Saturday", "Sunday"), "Weekend", "Week day"))
sum(data3$day == "Week day")
sum(data3$day == "Weekend")
data3$day <- lapply(data3$date, function(x) ifelse(weekdays(x) %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))
data3$day <- lapply(data3$date, function(x) ifelse(weekdays(x) %in% c("Saturday", "Sunday"), "weekend", "weekday"))
par(mfrow = 2)
par(mfrow = c(2, 1))
qplot(interval, mean(steps), data = data3, facets = .~day)
which.max(stepsmeanper5min)
names(which.max(stepsmeanper5min))
databyweekday <- with(data3, aggregate(steps, by = list(date, day), FUN = mean))
databyweekday <- aggregate(data3$steps, by = list(data3$interval, data3$day), FUN = mean)
databyweekday <- aggregate(data3$steps, list(data3$interval, data3$day), FUN = mean)
data3$day
data3$day <- ifelse(weekdays(data3$date) %in% c("Saturday", "Sunday"), "weekend", "weekday"))
data3$day <- ifelse(weekdays(data3$date) %in% c("Saturday", "Sunday"), "weekend", "weekday")
databyweekday <- with(data3, aggregate(steps, by = list(interval, day), FUN = mean))
databyweekday
databyweekday <- with(data3, aggregate(steps, by = list(interval, day), FUN = mean))
names(databyweekday)
names(databyweekday) <- c("interval", "day", "steps")
names(databyweekday)
qplot(x = interval, y = steps, data = databyweekday, facets = .~day)
qplot(x = interval, y = steps, data = databyweekday, facets = day~.)
qplot(x = interval, y = steps, data = databyweekday, facets = day~.) + geom_line()
ggplot(databyweekday, aes(interval, steps)) + geom_line()
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ .)
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ ., switch = "both")
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_wrap(day ~ ., facet.position = "top")
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_wrap(day ~ ., strip.position = "top")
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ ., strip.position = "top")
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) , strip.position = "top")
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) + facet_wrap(strip.position = "top")
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) + facet_wrap(facets, strip.position = "top")
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) + facet_wrap(day ~ ., strip.position = "top")
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) + facet_wrap(day ~ .)
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_wrap(day ~ .)
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_wrap(day, ncol = 1, nrow = 2)
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_wrap(day ~ ., ncol = 1, nrow = 2)
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ .)
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) + theme(strip.text=element_text(vjust=-10))
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) + theme(strip.placement = "top")
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_wrap(day ~, ncol = 1)
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_wrap(~ day, nrow = 2)
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_wrap(~ day, nrow = 2) + title("Average Number of Steps Taken by 5-minute Interval between Weekdays and Weekends")
ggplot(databyweekday, aes(interval, steps)) + geom_line() + facet_wrap(~ day, nrow = 2) + xlab("Interval") + ylab("Number of steps")
getwd()
data <- read.csv("activity.csv", sep = ",", header = TRUE)
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
setwd("\\\\OAKSBS11/RedirectedFolders/guillaumebonnissent/My Documents/GitHub/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
